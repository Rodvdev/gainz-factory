// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuario principal del sistema
model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String
  firstName             String
  lastName              String
  bio                   String?
  phoneNumber           String?
  profileImageUrl       String?
  isActive              Boolean   @default(true)
  emailVerified         DateTime?
  emailVerifiedAt       DateTime?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  
  // Onboarding & Profile Data
  onboardingCompleted   Boolean   @default(false)
  onboardingStep        String?   @default("welcome")
  timezone              String?   @default("America/Lima")
  notificationPreferences Json?   @default("[]")
  personalManifesto     String?
  
  // User Preferences
  preferredLanguage     String?   @default("es")
  fitnessLevel          String?   // beginner, intermediate, advanced
  primaryGoals          String[]  @default([])
  weeklyCommitment      Int?      @default(3) // days per week
  intensityPreference   String?   // quick, intense, balanced
  motivationType        String?   // health, appearance, energy, performance
  
  // Relaciones con otras entidades
  habits                Habit[]
  dailyScores           DailyScore[]
  challenges            Challenge[]
  mediaProgress         MediaProgress[]
  blogPosts             BlogPost[]
  forumPosts            ForumPost[]
  forumComments         ForumComment[]
  workoutRoutines       WorkoutRoutine[]
  tickets               Ticket[]
  userGoals             UserGoal[]
  journalEntries        JournalEntry[]
  aiInteractions        AIInteraction[]
  coach                 Coach?
  habitSchedules        HabitSchedule[]
  onboardingData        OnboardingData?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([email])
  @@index([isActive])
  @@index([onboardingCompleted])
}

enum HabitFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum EntryStatus {
  COMPLETED
  SKIPPED
  PARTIAL
  FAILED
}

enum HabitCategory {
  MORNING_ROUTINE
  PHYSICAL_TRAINING
  NUTRITION
  DEEP_WORK
  PERSONAL_DEVELOPMENT
  SOCIAL_CHARISMA
  REFLECTION
  SLEEP_RECOVERY
}

enum TrackingType {
  BINARY
  NUMERIC
  DURATION
  RATING
  TEXT
}

model Habit {
  id           String         @id @default(cuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  description  String?
  category     HabitCategory
  frequency    HabitFrequency
  trackingType TrackingType   @default(BINARY)
  targetCount  Int            @default(1)
  targetValue  Float?
  targetUnit   String?
  points       Int            @default(1)
  color        String?        @default("#3B82F6")
  icon         String?
  isActive     Boolean        @default(true)
  order        Int            @default(0)

  entries      HabitEntry[]
  streaks      HabitStreak[]
  schedule     HabitSchedule?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([userId])
  @@index([category])
  @@index([userId, isActive])
}

model HabitEntry {
  id          String      @id @default(cuid())
  habitId     String
  habit       Habit       @relation(fields: [habitId], references: [id], onDelete: Cascade)
  date        DateTime    @db.Date
  status      EntryStatus
  value       Float?
  textValue   String?
  note        String?
  timeSpent   Int?
  difficulty  Int?
  mood        Int?
  createdAt   DateTime    @default(now())

  @@unique([habitId, date])
}

model HabitStreak {
  id        String   @id @default(cuid())
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  startDate DateTime @db.Date
  endDate   DateTime? @db.Date
  length    Int      @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model DailyScore {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date            DateTime @db.Date
  totalPoints     Int      @default(0)
  completedHabits Int      @default(0)
  totalHabits     Int      @default(0)
  morningScore     Int   @default(0)
  physicalScore    Int   @default(0)
  nutritionScore   Int   @default(0)
  workScore        Int   @default(0)
  developmentScore Int   @default(0)
  socialScore      Int   @default(0)
  reflectionScore  Int   @default(0)
  sleepScore       Int   @default(0)
  percentile      Float?
  rank            Int?
  createdAt       DateTime @default(now())

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([userId, date])
}

model Challenge {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  category      HabitCategory?
  startDate     DateTime @db.Date
  endDate       DateTime @db.Date
  targetValue   Int
  currentValue  Int      @default(0)
  isCompleted   Boolean  @default(false)
  reward        String?
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([isCompleted])
  @@index([userId, isCompleted])
}

model Recipe {
  id          String   @id @default(cuid())
  title       String
  description String?
  objective   String?
  level       UserLevel?
  isPremium   Boolean  @default(false)
  imageUrl    String?
  videoUrl    String?
  createdAt   DateTime @default(now())
}

enum ServiceLevel {
  LOW
  HIGH
}

model Service {
  id          String       @id @default(cuid())
  name        String
  description String?
  level       ServiceLevel
  price       Float?
  duration    Int?         // en minutos
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
}

model MediaContent {
  id        String   @id @default(cuid())
  title     String
  type      String       // video, pdf, ebook, audio
  url       String
  topic     String       // Mindset, Nutrición, Espiritualidad, Ejercicios
  module    String?      // Para navegación por módulos
  episode   Int?
  isPremium Boolean      @default(false)
  createdAt DateTime @default(now())
  progress  MediaProgress[]
}

model MediaProgress {
  id          String   @id @default(cuid())
  userId      String
  mediaId     String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  media       MediaContent @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  watchedAt   DateTime?
  progress    Float    // 0 a 1
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags      String[]
  createdAt DateTime @default(now())
}

model ForumPost {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  content   String
  category  String?
  createdAt DateTime @default(now())
  comments  ForumComment[]
}

model ForumComment {
  id        String   @id @default(cuid())
  postId    String
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
}

enum ExerciseType {
  STRENGTH
  CARDIO
  MOBILITY
  FLEXIBILITY
}

enum IntensityLevel {
  LOW
  MEDIUM
  HIGH
}

enum UserLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Exercise {
  id          String          @id @default(cuid())
  name        String
  description String?
  type        ExerciseType
  intensity   IntensityLevel
  level       UserLevel
  technique   String?
  videoUrl    String?
  imageUrl    String?
  targetMuscles String[]
  createdAt   DateTime        @default(now())
  routines    RoutineExercise[]
}

model WorkoutRoutine {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  objective   String?
  level       UserLevel
  duration    Int?         // total en minutos
  isPublic    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  exercises   RoutineExercise[]
}

model RoutineExercise {
  id             String   @id @default(cuid())
  routineId      String
  exerciseId     String
  exercise       Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  routine        WorkoutRoutine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  order          Int
  sets           Int
  reps           Int
  restSeconds    Int
}

model Ticket {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // acceso, rutina personalizada, asesoría, etc.
  expiresAt   DateTime?
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

// Metas y objetivos del usuario para tracking de progreso
model UserGoal {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal       String   // ganar músculo, perder grasa, mejorar fuerza, etc.
  targetDate DateTime?
  createdAt  DateTime @default(now())
}

// Entradas de diario para reflexión y mindset
model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date
  prompt    String?  // Pregunta o tema para reflexionar
  content   String
  mood      Int?     // escala 1–10
  createdAt DateTime @default(now())

  @@index([userId, date])
}

// Entrenadores y staff con privilegios especiales
model Coach {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty   String?  // especialidad: fuerza, cardio, nutrición, etc.
  bio         String?
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
}

// Interacciones con IA para rutinas, mindset, nutrición
model AIInteraction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // rutinas, mindset, nutrición, espiritualidad
  prompt    String
  response  String
  createdAt DateTime @default(now())

  @@index([userId, type])
}

// Datos completos del onboarding del usuario
model OnboardingData {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Paso 1: Objetivos
  selectedObjectives    String[] @default([])
  objectivesCompletedAt DateTime?
  
  // Paso 2: Cuestionario
  questionnaireAnswers  Json?    // Respuestas del cuestionario
  questionnaireCompletedAt DateTime?
  
  // Paso 3: Hábitos
  selectedHabits        Json?    // Hábitos seleccionados
  habitsCompletedAt     DateTime?
  
  // Paso 4: Horarios
  scheduleData          Json?    // Configuración de horarios
  scheduleCompletedAt   DateTime?
  
  // Paso 5: Perfil
  profileCompletedAt    DateTime?
  personalBio           String?
  customManifesto       String?
  
  // Progreso general
  currentStep           String   @default("welcome")
  isCompleted           Boolean  @default(false)
  completedAt           DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
  @@index([isCompleted])
}

// Horarios específicos para cada hábito
model HabitSchedule {
  id              String    @id @default(cuid())
  userId          String
  habitId         String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  habit           Habit     @relation(fields: [habitId], references: [id], onDelete: Cascade)
  
  // Horario
  timeSlot        String    // morning, afternoon, evening
  specificTime    String    // "07:00", "19:30", etc.
  daysOfWeek      String[]  @default([]) // ["monday", "tuesday", etc.]
  
  // Recordatorios
  reminderEnabled Boolean   @default(true)
  reminderMinutes Int?      @default(15) // Minutos antes del hábito
  
  // Configuración
  isActive        Boolean   @default(true)
  priority        Int       @default(1) // 1-5, para ordenar hábitos
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([habitId]) // Un hábito puede tener solo un horario
  @@index([userId])
  @@index([daysOfWeek])
}

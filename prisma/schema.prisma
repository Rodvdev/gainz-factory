// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuario principal del sistema
model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String
  firstName             String
  lastName              String
  bio                   String?
  phoneNumber           String?
  profileImageUrl       String?
  isActive              Boolean   @default(true)
  emailVerified         DateTime?
  emailVerifiedAt       DateTime?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  
  // Onboarding & Profile Data
  onboardingCompleted   Boolean   @default(false)
  onboardingStep        String?   @default("welcome")
  timezone              String?   @default("America/Lima")
  notificationPreferences Json?   @default("[]")
  personalManifesto     String?
  
  // User Preferences
  preferredLanguage     String?   @default("es")
  fitnessLevel          String?   // beginner, intermediate, advanced
  primaryGoals          String[]  @default([])
  weeklyCommitment      Int?      @default(3) // days per week
  intensityPreference   String?   // quick, intense, balanced
  motivationType        String?   // health, appearance, energy, performance
  
  // Role & Permissions
  role                  UserRole  @default(USER)
  
  // Relaciones con otras entidades
  habits                Habit[]
  dailyScores           DailyScore[]
  challenges            Challenge[]
  mediaProgress         MediaProgress[]
  blogPosts             BlogPost[]
  forumPosts            ForumPost[]
  forumComments         ForumComment[]
  workoutRoutines       WorkoutRoutine[]
  tickets               Ticket[]
  userGoals             UserGoal[]
  journalEntries        JournalEntry[]
  aiInteractions        AIInteraction[]
  coach                 Coach?
  habitSchedules        HabitSchedule[]
  onboardingData        OnboardingData[]
  
  // Nuevas relaciones para Programmes y Forms
  taskSubmissions       TaskSubmission[]
  formSubmissions       FormSubmission[]
  userProgrammes        UserProgramme[]
  userAssignments       UserAssignment[]
  calendarEvents        CalendarEvent[]
  progressMetrics       ProgressMetrics[]
  
  // Gamificación
  userLevel             UserLevelData?
  userAchievements      UserAchievement[]
  
  // Sistema de Equipos
  teamMember            TeamMember?
  clientAssignments     ClientAssignment[]
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([email])
  @@index([isActive])
  @@index([onboardingCompleted])
}

enum HabitFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum EntryStatus {
  COMPLETED
  SKIPPED
  PARTIAL
  FAILED
}

enum HabitCategory {
  MORNING_ROUTINE
  PHYSICAL_TRAINING
  NUTRITION
  DEEP_WORK
  PERSONAL_DEVELOPMENT
  SOCIAL_CHARISMA
  REFLECTION
  SLEEP_RECOVERY
}

enum TrackingType {
  BINARY
  NUMERIC
  DURATION
  RATING
  TEXT
}

model Habit {
  id           String         @id @default(cuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  description  String?
  category     HabitCategory
  frequency    HabitFrequency
  trackingType TrackingType   @default(BINARY)
  targetCount  Int            @default(1)
  targetValue  Float?
  targetUnit   String?
  points       Int            @default(1)
  color        String?        @default("#3B82F6")
  icon         String?
  isActive     Boolean        @default(true)
  order        Int            @default(0)

  entries      HabitEntry[]
  streaks      HabitStreak[]
  schedule     HabitSchedule?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([userId])
  @@index([category])
  @@index([userId, isActive])
}

model HabitEntry {
  id          String      @id @default(cuid())
  habitId     String
  habit       Habit       @relation(fields: [habitId], references: [id], onDelete: Cascade)
  date        DateTime    @db.Date
  status      EntryStatus
  value       Float?
  textValue   String?
  note        String?
  timeSpent   Int?
  difficulty  Int?
  mood        Int?
  createdAt   DateTime    @default(now())

  @@unique([habitId, date])
}

model HabitStreak {
  id        String   @id @default(cuid())
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  startDate DateTime @db.Date
  endDate   DateTime? @db.Date
  length    Int      @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model DailyScore {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date            DateTime @db.Date
  totalPoints     Int      @default(0)
  completedHabits Int      @default(0)
  totalHabits     Int      @default(0)
  morningScore     Int   @default(0)
  physicalScore    Int   @default(0)
  nutritionScore   Int   @default(0)
  workScore        Int   @default(0)
  developmentScore Int   @default(0)
  socialScore      Int   @default(0)
  reflectionScore  Int   @default(0)
  sleepScore       Int   @default(0)
  percentile      Float?
  rank            Int?
  createdAt       DateTime @default(now())

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([userId, date])
}

model Challenge {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  category      HabitCategory?
  startDate     DateTime @db.Date
  endDate       DateTime @db.Date
  targetValue   Int
  currentValue  Int      @default(0)
  isCompleted   Boolean  @default(false)
  reward        String?
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([isCompleted])
  @@index([userId, isCompleted])
}

model Recipe {
  id          String          @id @default(cuid())
  title       String
  description String?
  objective   String?
  level       UserLevel?
  category    ContentCategory @default(DIET)
  isPremium   Boolean         @default(false)
  imageUrl    String?
  videoUrl    String?
  createdAt   DateTime        @default(now())
}

// Modelo para contenido de Mindset
model MindsetContent {
  id          String          @id @default(cuid())
  title       String
  description String?
  content     String          // Contenido principal del mindset
  category    ContentCategory @default(MINDSET)
  level       UserLevel?
  type        String?         // meditation, motivation, reflection, etc.
  duration    Int?            // duración en minutos
  isPremium   Boolean         @default(false)
  imageUrl    String?
  videoUrl    String?
  audioUrl    String?
  createdAt   DateTime        @default(now())
}

// Sistema de Programmes (Programas semanales)
model Programme {
  id          String          @id @default(cuid())
  title       String
  description String?
  category    ContentCategory
  level       UserLevel?
  duration    Int?            // duración en semanas
  isActive    Boolean         @default(true)
  isPublic    Boolean         @default(false)
  autoStart   Boolean         @default(false) // Para programmes en cascada
  createdBy   String          // ID del usuario que crea el programa
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // Relaciones
  weeklyPlans WeeklyPlan[]
  sequences   ProgrammeSequence[]
  userProgrammes UserProgramme[]
  calendarEvents CalendarEvent[]
  
  @@index([isActive])
  @@index([category])
}

// Plan semanal dentro de un programa
model WeeklyPlan {
  id          String    @id @default(cuid())
  programmeId String
  programme   Programme @relation(fields: [programmeId], references: [id], onDelete: Cascade)
  weekNumber  Int       // Número de semana (1, 2, 3, etc.)
  title       String?
  description String?
  createdAt   DateTime  @default(now())
  
  // Relaciones
  dailyTasks  DailyTask[]
  
  @@unique([programmeId, weekNumber])
  @@index([programmeId])
}

// Tareas diarias dentro de un plan semanal
model DailyTask {
  id            String    @id @default(cuid())
  weeklyPlanId  String
  weeklyPlan    WeeklyPlan @relation(fields: [weeklyPlanId], references: [id], onDelete: Cascade)
  dayOfWeek     Int       // 0 = Domingo, 1 = Lunes, ..., 6 = Sábado
  taskType      TaskType
  title         String
  description   String?
  
  // Datos específicos según el tipo de tarea
  taskData      Json?     // Datos específicos: routineId, videoUrl, formId, etc.
  
  // Configuración
  isRequired    Boolean   @default(true)
  estimatedDuration Int?  // duración estimada en minutos
  order         Int       @default(0)
  
  createdAt     DateTime  @default(now())
  
  // Relaciones
  submissions   TaskSubmission[]
  
  @@index([weeklyPlanId, dayOfWeek])
  @@index([taskType])
}

// Envíos/completado de tareas por usuarios
model TaskSubmission {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String
  task        DailyTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  // Datos del envío
  submittedData Json?   // Datos específicos del envío
  files        String[] // URLs de archivos subidos
  notes        String?
  
  // Estado
  status      String    @default("completed") // completed, partial, failed
  score       Float?    // Puntuación si aplica
  feedback    String?   // Comentarios del coach/admin
  
  completedAt DateTime  @default(now())
  createdAt   DateTime  @default(now())
  
  @@unique([userId, taskId])
  @@index([userId])
  @@index([taskId])
  @@index([completedAt])
}

// Sistema de Formularios
model Form {
  id          String      @id @default(cuid())
  title       String
  description String?
  category    ContentCategory?
  isActive    Boolean     @default(true)
  isRequired  Boolean     @default(false)
  createdBy   String      // ID del usuario que crea el formulario
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relaciones
  fields      InputField[]
  submissions FormSubmission[]
  
  @@index([isActive])
  @@index([category])
}

// Campos de entrada para formularios
model InputField {
  id          String      @id @default(cuid())
  formId      String
  form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  // Configuración del campo
  name        String      // Nombre del campo (para el backend)
  label       String      // Etiqueta visible para el usuario
  type        InputType
  placeholder String?
  helpText    String?
  
  // Validación
  isRequired  Boolean     @default(false)
  minLength   Int?
  maxLength   Int?
  minValue    Float?
  maxValue    Float?
  pattern     String?     // Regex pattern para validación
  
  // Opciones para campos de selección
  options     Json?       // Array de opciones para SELECT, RADIO, CHECKBOX
  
  // Configuración visual
  order       Int         @default(0)
  width       String?     // CSS width (ej: "100%", "50%")
  
  createdAt   DateTime    @default(now())
  
  @@index([formId])
  @@index([order])
}

// Envíos de formularios por usuarios
model FormSubmission {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Datos del envío
  data        Json     // Respuestas del formulario
  files       String[] // URLs de archivos subidos
  
  // Metadatos
  ipAddress   String?
  userAgent   String?
  submittedAt DateTime @default(now())
  
  // Estado y procesamiento
  status      String   @default("submitted") // submitted, reviewed, approved, rejected
  reviewedBy  String?  // ID del usuario que revisó
  reviewedAt  DateTime?
  feedback    String?
  
  @@index([formId])
  @@index([userId])
  @@index([submittedAt])
  @@index([status])
}

enum ServiceLevel {
  LOW
  HIGH
}

model Service {
  id          String       @id @default(cuid())
  name        String
  description String?
  level       ServiceLevel
  price       Float?
  duration    Int?         // en minutos
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
}

model MediaContent {
  id        String   @id @default(cuid())
  title     String
  type      String       // video, pdf, ebook, audio
  url       String
  topic     String       // Mindset, Nutrición, Espiritualidad, Ejercicios
  module    String?      // Para navegación por módulos
  episode   Int?
  isPremium Boolean      @default(false)
  createdAt DateTime @default(now())
  progress  MediaProgress[]
}

model MediaProgress {
  id          String   @id @default(cuid())
  userId      String
  mediaId     String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  media       MediaContent @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  watchedAt   DateTime?
  progress    Float    // 0 a 1
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags      String[]
  createdAt DateTime @default(now())
}

model ForumPost {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  content   String
  category  String?
  createdAt DateTime @default(now())
  comments  ForumComment[]
}

model ForumComment {
  id        String   @id @default(cuid())
  postId    String
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
}

enum ExerciseType {
  STRENGTH
  CARDIO
  MOBILITY
  FLEXIBILITY
}

enum IntensityLevel {
  LOW
  MEDIUM
  HIGH
}

enum UserLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum UserRole {
  USER
  ADMIN
  COACH
}

enum TeamRole {
  TRAINER
  NUTRITIONIST
  YOGA_INSTRUCTOR
  LIFE_COACH
  CONTENT_CREATOR
}

// Categorías superiores para organizar el contenido
enum ContentCategory {
  EXERCISE    // Ejercicios físicos
  ROUTINE     // Rutinas de entrenamiento
  DIET        // Nutrición y dietas
  MINDSET     // Desarrollo mental y motivación
}

// Tipos de tareas para los programas semanales
enum TaskType {
  WORKOUT           // Entrenamiento con rutinas
  CARDIO            // Ejercicio cardiovascular
  VIDEO             // Video educativo o motivacional
  NUTRITION         // Tarea relacionada con nutrición
  RECORD_PROGRESS   // Registrar progreso con métricas personales
  PHOTO             // Subir fotos de progreso
  SESSION           // Sesión presencial o online
  MESSAGE           // Mensaje programado
  FORM              // Completar formulario
}

// Tipos de entrada para formularios
enum InputType {
  TEXT              // Campo de texto
  TEXTAREA          // Área de texto multilínea
  NUMBER            // Campo numérico
  EMAIL             // Campo de email
  PASSWORD          // Campo de contraseña
  DATE              // Selector de fecha
  TIME              // Selector de hora
  SELECT            // Lista desplegable
  MULTISELECT       // Selección múltiple
  RADIO             // Botones de radio
  CHECKBOX          // Casillas de verificación
  FILE              // Subida de archivo
  RATING            // Calificación (estrellas)
  SLIDER            // Control deslizante
  URL               // Campo de URL
  PHONE             // Campo de teléfono
  COLOR             // Selector de color
}

model Exercise {
  id          String          @id @default(cuid())
  name        String
  description String?
  type        ExerciseType
  intensity   IntensityLevel
  level       UserLevel
  category    ContentCategory @default(EXERCISE)
  technique   String?
  videoUrl    String?
  imageUrl    String?
  targetMuscles String[]
  createdAt   DateTime        @default(now())
  routines    RoutineExercise[]
}

model WorkoutRoutine {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  objective   String?
  level       UserLevel
  category    ContentCategory @default(ROUTINE)
  duration    Int?         // total en minutos
  isPublic    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  exercises   RoutineExercise[]
}

model RoutineExercise {
  id             String   @id @default(cuid())
  routineId      String
  exerciseId     String
  exercise       Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  routine        WorkoutRoutine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  order          Int
  sets           Int
  reps           Int
  restSeconds    Int
}

model Ticket {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // acceso, rutina personalizada, asesoría, etc.
  expiresAt   DateTime?
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

// Metas y objetivos del usuario para tracking de progreso
model UserGoal {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal       String   // ganar músculo, perder grasa, mejorar fuerza, etc.
  targetDate DateTime?
  createdAt  DateTime @default(now())
}

// Entradas de diario para reflexión y mindset
model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date
  prompt    String?  // Pregunta o tema para reflexionar
  content   String
  mood      Int?     // escala 1–10
  createdAt DateTime @default(now())

  @@index([userId, date])
}

// Entrenadores y staff con privilegios especiales
model Coach {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty   String?  // especialidad: fuerza, cardio, nutrición, etc.
  bio         String?
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
}

// Interacciones con IA para rutinas, mindset, nutrición
model AIInteraction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // rutinas, mindset, nutrición, espiritualidad
  prompt    String
  response  String
  createdAt DateTime @default(now())

  @@index([userId, type])
}

// Datos completos del onboarding del usuario
model OnboardingData {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Paso 1: Objetivos
  selectedObjectives    String[] @default([])
  objectivesCompletedAt DateTime?
  
  // Paso 2: Cuestionario
  questionnaireAnswers  Json?    // Respuestas del cuestionario
  questionnaireCompletedAt DateTime?
  
  // Paso 3: Hábitos
  selectedHabits        Json?    // Hábitos seleccionados
  habitsCompletedAt     DateTime?
  
  // Paso 4: Horarios
  scheduleData          Json?    // Configuración de horarios
  scheduleCompletedAt   DateTime?
  
  // Paso 5: Perfil
  profileCompletedAt    DateTime?
  personalBio           String?
  customManifesto       String?
  
  // Progreso general
  currentStep           String   @default("welcome")
  isCompleted           Boolean  @default(false)
  completedAt           DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
  @@index([isCompleted])
}

// Horarios específicos para cada hábito
model HabitSchedule {
  id              String    @id @default(cuid())
  userId          String
  habitId         String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  habit           Habit     @relation(fields: [habitId], references: [id], onDelete: Cascade)
  
  // Horario
  timeSlot        String    // morning, afternoon, evening
  specificTime    String    // "07:00", "19:30", etc.
  daysOfWeek      String[]  @default([]) // ["monday", "tuesday", etc.]
  
  // Recordatorios
  reminderEnabled Boolean   @default(true)
  reminderMinutes Int?      @default(15) // Minutos antes del hábito
  
  // Configuración
  isActive        Boolean   @default(true)
  priority        Int       @default(1) // 1-5, para ordenar hábitos
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([habitId]) // Un hábito puede tener solo un horario
  @@index([userId])
  @@index([daysOfWeek])
}

// Configuración de la landing page
model LandingConfig {
  id              String   @id @default(cuid())
  
  // Hero Section
  heroTitle       String
  heroSubtitle    String
  heroDescription String?
  heroCtaPrimary  String   @default("Comenzar Ahora")
  heroCtaSecondary String  @default("Ver Recetas")
  heroCtaPrimaryLink String @default("/onboarding/welcome")
  heroCtaSecondaryLink String @default("/ebook")
  
  // Stats Section
  statsEnabled    Boolean  @default(true)
  stat1Title      String   @default("100%")
  stat1Subtitle   String   @default("Personalizado")
  stat2Title      String   @default("24/7")
  stat2Subtitle   String   @default("Soporte")
  stat3Title      String   @default("∞")
  stat3Subtitle   String   @default("Resultados")
  
  // Products Section
  productsTitle   String   @default("Productos y Servicios")
  productsSubtitle String  @default("Descubre todo lo que necesitas para tu transformación física y mental")
  
  // Footer
  footerDescription String @default("Tu plataforma integral para transformación física y mental.")
  instagramHandle   String @default("@elchepaaa")
  whatsappNumber    String @default("51978381334")
  
  // Meta
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([isActive])
}

// Productos/Servicios configurables
model LandingProduct {
  id              String   @id @default(cuid())
  
  // Información básica
  title           String
  subtitle        String
  description     String
  icon            String   // Nombre del icono de Lucide
  color           String   @default("#DC2626")
  
  // Enlaces y comportamiento
  link            String
  linkType        String   @default("page") // page, whatsapp, external
  motivational    String?  // Texto motivacional opcional
  
  // Configuración
  isActive        Boolean  @default(true)
  order           Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([isActive])
  @@index([order])
}

// Testimonios y avances (Wall of Gainz)
model Testimonial {
  id              String   @id @default(cuid())
  
  // Información del usuario
  userName        String
  userImage       String?
  userLocation    String?
  
  // Contenido del testimonio
  title           String
  content         String
  beforeImage     String?
  afterImage      String?
  videoUrl        String?
  
  // Metadatos
  category        String   @default("general") // general, transformation, nutrition, training
  rating          Int?     // 1-5 estrellas
  isVerified      Boolean  @default(false)
  isFeatured      Boolean  @default(false)
  
  // Moderación
  status          TestimonialStatus @default(PENDING)
  moderatedBy     String?
  moderatedAt     DateTime?
  rejectionReason String?
  
  // Configuración
  isActive        Boolean  @default(true)
  order           Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([status])
  @@index([isActive])
  @@index([isFeatured])
  @@index([category])
}

// Sistema de Gamificación - Logros
enum AchievementRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum AchievementCategory {
  STREAK
  HABITS
  CHALLENGES
  MILESTONE
  SOCIAL
  CONSISTENCY
}

model Achievement {
  id          String              @id @default(cuid())
  title       String
  description String
  icon        String              // emoji
  rarity      AchievementRarity   @default(COMMON)
  category    AchievementCategory @default(HABITS)
  points      Int                 @default(10)
  requirements Json?              // condiciones específicas
  isActive    Boolean             @default(true)
  
  // Relaciones
  userAchievements UserAchievement[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([title, category])
  @@index([rarity])
  @@index([category])
  @@index([isActive])
}

// Logros desbloqueados por usuarios
model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())
  isViewed      Boolean     @default(false)
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([unlockedAt])
}

// Sistema de Niveles y XP
model UserLevelData {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentLevel    Int      @default(1)
  totalXP         Int      @default(0)
  currentLevelXP  Int      @default(0)
  nextLevelXP     Int      @default(100)
  levelName       String   @default("Novato GF")
  avatarEmoji     String   @default("🥚")
  
  // Estadísticas
  totalPoints     Int      @default(0)
  longestStreak   Int      @default(0)
  achievementsUnlocked Int @default(0)
  
  // Configuración
  isActive        Boolean  @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([currentLevel])
}

// Configuración de Niveles
model LevelConfig {
  id          String   @id @default(cuid())
  level       Int      @unique
  name        String
  description String
  emoji       String
  requiredXP  Int
  color       String   @default("#3B82F6")
  
  // Beneficios del nivel
  benefits    Json?    // array de beneficios
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([level])
  @@index([isActive])
}

enum TestimonialStatus {
  PENDING
  APPROVED
  REJECTED
}

// Sistema de Asignación de Programmes a Usuarios
model UserProgramme {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  programmeId   String
  programme     Programme @relation(fields: [programmeId], references: [id], onDelete: Cascade)
  assignedBy    String?   // Coach ID
  startDate     DateTime
  endDate       DateTime?
  status        String    @default("active") // active, completed, paused
  progress      Float     @default(0) // 0-100%
  notes         String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([userId, programmeId])
  @@index([userId])
  @@index([programmeId])
  @@index([status])
}

// Sistema de Asignación de Contenido Personalizado
model UserAssignment {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentType String    // "exercise", "nutrition", "mindset", "video", "document", "form"
  contentId   String    // ID del contenido específico
  assignedBy  String?   // Coach ID
  assignedAt  DateTime  @default(now())
  isActive    Boolean   @default(true)
  notes       String?
  dueDate     DateTime?
  completedAt DateTime?
  
  @@index([userId])
  @@index([contentType])
  @@index([assignedBy])
  @@index([isActive])
}

// Programmes en Cascada
model ProgrammeSequence {
  id              String    @id @default(cuid())
  programmeId     String
  programme       Programme @relation(fields: [programmeId], references: [id], onDelete: Cascade)
  nextProgrammeId String?   // ID del siguiente programa
  autoStart       Boolean   @default(false)
  delayDays       Int       @default(0) // Días de espera antes de iniciar
  conditions      Json?     // Condiciones para activar el siguiente programa
  
  createdAt       DateTime  @default(now())
  
  @@index([programmeId])
}

// Sistema de Equipos
model TeamMember {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        TeamRole
  specialty   String[]  // Especialidades específicas
  bio         String?
  experience  Int       @default(0) // años de experiencia
  rating      Float     @default(0)
  hourlyRate  Float?    // Tarifa por hora
  isActive    Boolean   @default(true)
  isAvailable Boolean   @default(true)
  
  // Relaciones
  schedules   Schedule[]
  calendarEvents CalendarEvent[]
  clientAssignments ClientAssignment[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([role])
  @@index([isActive])
  @@index([isAvailable])
}

// Horarios de Disponibilidad de Team Members
model Schedule {
  id            String      @id @default(cuid())
  teamMemberId  String
  teamMember    TeamMember  @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  dayOfWeek     Int         // 0 = Domingo, 1 = Lunes, etc.
  startTime     String      // "09:00"
  endTime       String      // "17:00"
  isAvailable   Boolean     @default(true)
  
  @@index([teamMemberId])
  @@index([dayOfWeek])
}

// Sistema de Calendario Integrado
model CalendarEvent {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String    // "workout", "nutrition", "mindset", "session", "meeting"
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  programmeId String?
  programme   Programme? @relation(fields: [programmeId], references: [id])
  teamMemberId String?  // Coach asignado
  teamMember  TeamMember? @relation(fields: [teamMemberId], references: [id])
  isRecurring Boolean   @default(false)
  recurrence  Json?     // Configuración de recurrencia
  status      String    @default("scheduled") // scheduled, completed, cancelled
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([userId])
  @@index([type])
  @@index([startTime])
  @@index([teamMemberId])
}

// Métricas de Progreso Personalizadas
model ProgressMetrics {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  metricType  String    // "weight", "body_fat", "muscle_mass", "measurements", etc.
  value       Float
  unit        String    // "kg", "%", "cm", etc.
  date        DateTime
  notes       String?
  photoUrl    String?   // Foto de progreso
  isPrivate   Boolean   @default(false)
  
  createdAt   DateTime  @default(now())
  
  @@index([userId])
  @@index([metricType])
  @@index([date])
}

// Asignación de Clientes a Coaches
model ClientAssignment {
  id            String      @id @default(cuid())
  clientId      String
  client        User        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  teamMemberId  String
  teamMember    TeamMember  @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  assignedAt    DateTime    @default(now())
  isActive      Boolean     @default(true)
  notes         String?
  
  @@unique([clientId, teamMemberId])
  @@index([clientId])
  @@index([teamMemberId])
}
